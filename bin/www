#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('demo:server')
const http = require('http')
const app = require('../src/app')
const syncDb = require('../src/db/sequelize/sync')

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback())
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10)
    if (Number.isNaN(port)) {
        // named pipe
        return val
    }
    if (port >= 0) {
        // port number
        return port
    }
    return false
}

const port = normalizePort(process.env.PORT || '3000')
// 先同步mysql 在启动服务
syncDb()
    .then(() => {
        server.listen(port, () => {
            console.log(`Server is running at http://localhost:${port}`)
            console.log('Press CTRL-C to stop \n')
        })
        server.on('error', onError)
        server.on('listening', onListening)
    })
    .catch(error => {
        console.log(error, 'error')
    })
/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }
    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES': {
            console.error(`${bind} requires elevated privileges`)
            process.exit(1)
        }
        case 'EADDRINUSE': {
            console.error(`${bind} is already in use`)
            process.exit(1)
        }

        default:
            throw error
    }
}
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`
    debug(`Listening on ${bind}`)
}
